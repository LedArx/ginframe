// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.0--rc1
// source: rpcUserService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RpcUserService_GetUserInfo_FullMethodName = "/pb.RpcUserService/GetUserInfo"
)

// RpcUserServiceClient is the client API for RpcUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcUserServiceClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
}

type rpcUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcUserServiceClient(cc grpc.ClientConnInterface) RpcUserServiceClient {
	return &rpcUserServiceClient{cc}
}

func (c *rpcUserServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, RpcUserService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcUserServiceServer is the server API for RpcUserService service.
// All implementations must embed UnimplementedRpcUserServiceServer
// for forward compatibility
type RpcUserServiceServer interface {
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	mustEmbedUnimplementedRpcUserServiceServer()
}

// UnimplementedRpcUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRpcUserServiceServer struct {
}

func (UnimplementedRpcUserServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedRpcUserServiceServer) mustEmbedUnimplementedRpcUserServiceServer() {}

// UnsafeRpcUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcUserServiceServer will
// result in compilation errors.
type UnsafeRpcUserServiceServer interface {
	mustEmbedUnimplementedRpcUserServiceServer()
}

func RegisterRpcUserServiceServer(s grpc.ServiceRegistrar, srv RpcUserServiceServer) {
	s.RegisterService(&RpcUserService_ServiceDesc, srv)
}

func _RpcUserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcUserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcUserService_ServiceDesc is the grpc.ServiceDesc for RpcUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RpcUserService",
	HandlerType: (*RpcUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _RpcUserService_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcUserService.proto",
}
